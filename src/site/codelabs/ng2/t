<div class="row"> <div class="col-md-7" markdown="1">

</div> <div class="col-md-5" markdown="1">

&nbsp; {% comment %} non-breaking space required for bootstrap/markdown bogosity {% endcomment %}

</div> </div>

<hr>

##Step 1: Run the skeleton app {#step-one}

In this step, you run the skeleton version of the app in DartPad.

### <i class="fa fa-anchor"> </i> Run the app in DartPad.

<a href="{{site.custom.dartpad.direct-link}}/9642dce02da158457f12" target="_blank">Open the skeleton app in DartPad.</a>

Click the **Run** button and make sure that the **HTML OUTPUT** tab
is selected. You should see a red-and-white name badge, plus some text,
as shown in the following screenshot:

<img src="images/InitialDartPad.png" alt="A screenshot of the output created in the skeleton app">

DartPad is an interactive web app that lets you immediately play with
Dart in your browser without having to download or install any software,
or do any special setup. It just works!

The following screenshot shows DartPad's UI. This example
contains an intentional error to show you how DartPad handles problems
that it detects.

<img src="images/AnnotatedDartPad.png" alt="A screenshot of DartPad running the skeleton version of the client code">

The code appears on the left under the **DART**,
**HTML**, or **CSS** tab.
Output appears on the right under the
**HTML OUTPUT** or **CONSOLE** tab.
You can always restart the app using the **Run** button.
If the analyzer detects problems, errors and warnings appear
at the bottom of the screen.

<hr>

### <i class="fa fa-anchor"> </i> Review the code.

<div class="trydart-step-details" markdown="1">
Get familiar with the Dart and HTML code (in `main.dart`
and `index.html`, respectively) for the skeleton version of
the app.
</div>

<div class="trydart-step-details" markdown="1">
#### **main.dart**
</div>

<div class="row"> <div class="col-md-7" markdown="1">

<div class="trydart-step-details" markdown="1">

{% prettify dart %}
[[highlight]]void main() {[[/highlight]]
  [[highlight]]// Your app starts here.[[/highlight]]
  [[highlight]]// In Step 2, you'll add code to listen for updates for the pirate badge.[[/highlight]]
[[highlight]]}[[/highlight]]
{% endprettify %}
</div>

</div> <div class="col-md-5" markdown="1">

<i class="fa fa-key key-header"> </i> <strong> Key information </strong>

* The `main()` function is the single entry point for the app.

* `main()` is a top-level function.

* A top-level variable or function is one that is declared outside
  a class definition.

&nbsp; {% comment %} non-breaking space required for bootstrap/markdown bogosity {% endcomment %}
</div> </div>

<div class="trydart-step-details" markdown="1">
#### **index.html**
</div>

<div class="row"> <div class="col-md-7">
<div class="trydart-step-details" markdown="1">

{% prettify html %}
<h1>Pirate badge</h1>

[[highlight]]<div class="widgets">[[/highlight]]
  [[highlight]]TO DO: Put the UI widgets here.[[/highlight]]
[[highlight]]</div>[[/highlight]]
<div class="badge">
  <div class="greeting">
    Arrr! Me name is
  </div>
  <div class="name">
    [[highlight]]<span id="badgeName"> </span>[[/highlight]]
  </div>
</div>
{% endprettify %}

</div>

</div> <div class="col-md-5" markdown="1">

* All of the changes you make to the HTML in this code lab
  are within the &lt;div&gt; element identified with the class `widgets`.

* In later steps,
  the &lt;span&gt; element with the ID `badgeName`
  is programmatically updated by the Dart code
  based on user input.

</div> </div>
